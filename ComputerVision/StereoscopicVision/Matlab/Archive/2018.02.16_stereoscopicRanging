function stereoscopic_ranging()
    
    % Close figures, clear command window, initialize ROS
    close all;
    clc;
    rosshutdown;
    rosinit;

    % Import camera calibration
    stereoParams = import_stereoParams();

    % Render
    render_images(stereoParams);
    
end

function stereoParams = import_stereoParams()

    % Load stereoParams.mat file (must be in working directory)
    stereoParams = load('stereoParams.mat');
    stereoParams = stereoParams.stereoParams;
    
%     % Output to workspace (optional)
%     assignin('base','stereoParams',stereoParams);

end

function render_images(stereoParams)

    % Create subscriber with callback function
    imgSubR = rossubscriber('usb_cam/image_raw',@rightImageRawCallback);
    imgSubL = rossubscriber('usb_cam/image_raw',@leftImageRawCallback);
    
    % Declare global variables
    global R_data_global
    global R_width_global
    global R_height_global
    global L_data_global
    
    % Pause (allow first message to publish)
    pause(2);
    
    % Preallocate data matrices (for speed)
    width = R_width_global;
    height = R_height_global;
    R_data = zeros(width*height*3,1,'uint8');
    L_data = zeros(width*height*3,1,'uint8');

    % Start counter
    count = 1;
    children = 0;
    
    while (1==1)
       
        % Save message callback data to local variables (if global variable is overwritten during this step, images will skew)
        R_data = R_data_global;
        L_data = L_data_global;
        
        % Perform complex reshape process from image message    
        imgR = cat(3,cat(3,reshape(R_data(1:3:end),[width,height])',...
            reshape(R_data(2:3:end),[width,height])'),...
            reshape(R_data(3:3:end),[width,height])');
        imgL = cat(3,cat(3,reshape(L_data(1:3:end),[width,height])',...
            reshape(L_data(2:3:end),[width,height])'),...
            reshape(L_data(3:3:end),[width,height])');
                
        % Rectify the two images
        [rectL,rectR] = rectifyStereoImages(imgL,imgR,stereoParams);
        
        % Generate disparity map
        greyRectR = rgb2gray(rectR);
        greyRectL = rgb2gray(rectL);
%         disparityRange = 100+16*1.5*[-1,1];
        disparityRange = 60+16*3*[-1,1];
        disparityMap = disparity(greyRectL,greyRectR,...
            'Method','SemiGlobal',...               % default SemiGlobal
            'DisparityRange',disparityRange,...     % default [0,64]
            'BlockSize',15,...                      % default 15
            'ContrastThreshold',0.2,...            % default 0.5
            'UniquenessThreshold',45,...            % default 15
            'DistanceThreshold',[]);             % default []
        assignin('base','disparityMapOriginal',disparityMap);
        disparityMap(disparityMap < disparityRange(1)) = NaN;
        disparityMap(disparityMap > disparityRange(2)) = NaN;
        assignin('base','disparityMapFixed',disparityMap);
        
        % Reconstruct the 3-D Scene
        points3D = reconstructScene(disparityMap,stereoParams);
        points3D = points3D./1000;
        ptCloud = pointCloud(points3D,'Color',rectL);
        
        % Set reference point cloud to first cloud in sequence
        if count == 1
            
            % Set the first point cloud to the "reference" point cloud
            ptCloudRef = ptCloud;
            
        else
        
            % Use previous moving point cloud as reference.
            gridSize = 0.01;
            fixed = pcdownsample(ptCloudRef,'gridAverage',gridSize);
            moving = pcdownsample(ptCloud,'gridAverage',gridSize);
            
            % Apply ICP registration.
            tform = pcregrigid(moving,fixed,'Metric','pointToPlane','Extrapolate',true);
            accumTform = tform; 
            
            % Transform the current point cloud to the reference coordinate system defined by the first point cloud.
            ptCloudAligned = pctransform(ptCloud,accumTform);
            accumTform = affine3d(tform.T*accumTform.T);
            
            % Update the world scene.
            mergeSize = 0.015;
            if count == 2
                
                % Create point cloud scene relative to reference frame
                ptCloudScene = pcmerge(ptCloudRef,ptCloudAligned,mergeSize);
                
            else
                
                % Create point cloud scene relative to last frame
                ptCloudScene = pcmerge(ptCloudScene,ptCloudAligned,mergeSize);
                
            end
            
            % Plot images, stereo anaglyph, and disparity map
            figure(1);
            subplot(2,2,1);
            imshow(imgR);
            title('Right Frame');
            subplot(2,2,3);
            imshow(imgL);
            title('Left Frame');
            subplot(2,2,2);
            imshow(stereoAnaglyph(rectR,rectL));
            title('Rectified Stereo-Anaglyph');
            subplot(2,2,4);
            imshow(disparityMap,disparityRange);
            title('Disparity Colormap');
            colormap(gca,jet);
            colorbar;
            
            % Plot point cloud in standard figure
            figure(2);
            hAxes = pcshow(ptCloudScene,'VerticalAxis','Y','VerticalAxisDir','Up','MarkerSize',250);
            hScatter.XData = ptCloudScene.Location(:,1);
            hScatter.YData = ptCloudScene.Location(:,2);
            hScatter.ZData = ptCloudScene.Location(:,3);
            hScatter.CData = ptCloudScene.Color;
            drawnow('limitrate');
            
%             % Streaming point cloud viewer
%             player3D = pcplayer([-1, 1], [-1, 1], [-5, -2], 'VerticalAxis', 'y', ...
%                 'VerticalAxisDir', 'down');
%             view(player3D, ptCloud);

        end
        
    count = count+1;
        
    end

end

function rightImageRawCallback(~,message)
    
    % Declare global variables to store position and orientation
    global R_data_global
    global R_width_global
    global R_height_global
    
    % Set relevant message parameters to global variables
    R_data_global = message.Data;
    R_width_global = message.Width;
    R_height_global = message.Height;
    
end

function leftImageRawCallback(~,message)
    
    % Declare global variables to store position and orientation
    global L_data_global
    global L_width_global
    global L_height_global
    
    % Set relevant message parameters to global variables
    L_data_global = message.Data;
    L_width_global = message.Width;
    L_height_global = message.Height;
    
end
